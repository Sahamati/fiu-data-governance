static_resources:
  listeners:
  # Inbound network traffic listener.
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 15006
    listener_filters:
    - name: "envoy.filters.listener.original_dst"
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
    - name: "envoy.filters.listener.http_inspector"
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.listener.http_inspector.v3.HttpInspector
    - name: "envoy.filters.listener.tls_inspector"
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector        
    filter_chains:
    - filter_chain_match:
        transport_protocol: tls
      transport_socket:
        name: envoy.transport_sockets.att_tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.att_tls.v3.DownstreamAttTlsContext
          attested_tls_context:
            signing_context:
              certificate:
                  filename: certs/server-cert.pem
              private_key:
                  filename: keys/server-key.pem
              attestation_token:
                  filename: attestation-token.txt
            validation_context:
              attestation_service_trusted_keys:
                  filename: attestation-service-key.pem
          downstream_tls_context:
            require_client_certificate: true
            common_tls_context:
              tls_params:
                tls_minimum_protocol_version: TLSv1_3
              tls_certificates:
              - certificate_chain:
                  filename: certs/server-cert.pem
                private_key:
                  filename: keys/server-key.pem
              validation_context:
                trust_chain_verification: ACCEPT_UNTRUSTED
      filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config: 
          '@type': "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
          stat_prefix: inbound_proxy
          forward_client_cert_details: ALWAYS_FORWARD_ONLY
          route_config: 
            name: all
            virtual_hosts:
            - name: inbound-pass-through
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: inbound-pass-through
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                -- Add a request header to denote an incoming request.
                function envoy_on_request(request_handle)
                  request_handle:headers():add("x-ccr-is-incoming", "true")
                end
          - name: envoy.filters.http.ext_proc
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor
              # Not implemented by Envoy yet. Once supported it will not require a 'message_timeout'.
              async_mode: false              
              failure_mode_allow: false
              processing_mode:
                request_header_mode: "SEND"
                request_body_mode: "BUFFERED"
                request_trailer_mode: "SKIP"
                response_header_mode: "SEND"
                response_body_mode: "BUFFERED"
                response_trailer_mode: "SKIP"
              # TODO: for now a sufficiently large timeout until we have async mode support.
              message_timeout: 10000s
              grpc_service:
                envoy_grpc:
                  cluster_name: ccr-sidecar
          - name: envoy.filters.http.router
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
    - filter_chain_match:
      filters:
      - name: envoy.filters.network.tcp_proxy
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
          cluster: black-hole
          stat_prefix: ingress_tcp
  # Outbound network traffic listener.
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 15001
    listener_filters:
    - name: "envoy.filters.listener.original_dst"
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
    - name: "envoy.filters.listener.http_inspector"
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.listener.http_inspector.v3.HttpInspector
    - name: "envoy.filters.listener.tls_inspector"
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector 
    filter_chains:
    - filter_chain_match:
      filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config: 
          '@type': "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
          stat_prefix: outbound_proxy
          forward_client_cert_details: ALWAYS_FORWARD_ONLY
          route_config: 
            name: all
            virtual_hosts:
              - name: outbound-pass-through 
                domains: 
                  - '*'
                routes:
                  - match: { prefix: "/"}
                    route:
                      cluster: outbound-pass-through 
          http_filters:
          - name: envoy.filters.http.dynamic_forward_proxy
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
              dns_cache_config:
                name: dynamic_forward_proxy_cache_config
                dns_lookup_family: V4_ONLY
                dns_resolution_config:
                  resolvers:
                  - socket_address:
                      address: "8.8.8.8"
                      port_value: 53
                  dns_resolver_options:
                    use_tcp_for_dns_lookups: true
                    no_default_search_domain: true
          - name: envoy.filters.http.router    
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
  clusters:
  - name: inbound-pass-through
    type: ORIGINAL_DST
    lb_policy: CLUSTER_PROVIDED
    upstream_bind_config:
      source_address:
        address: 127.0.0.6
        port_value: 0
  - name: outbound-pass-through
    lb_policy: CLUSTER_PROVIDED
    cluster_type:
      name: envoy.clusters.dynamic_forward_proxy
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
        dns_cache_config:
          name: dynamic_forward_proxy_cache_config
          dns_lookup_family: V4_ONLY
          dns_resolution_config:
            resolvers:
            - socket_address:
                address: "8.8.8.8"
                port_value: 53
            dns_resolver_options:
              use_tcp_for_dns_lookups: true
              no_default_search_domain: true
    transport_socket:
      name: envoy.transport_sockets.att_tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.att_tls.v3.UpstreamAttTlsContext
        attested_tls_context:
          signing_context:
            certificate:
                filename: certs/server-cert.pem
            private_key:
                filename: keys/server-key.pem
            attestation_token:
                filename: attestation-token.txt
          validation_context:
            attestation_service_trusted_keys:
                filename: attestation-service-key.pem
        upstream_tls_context:
          common_tls_context:
            tls_params:
              tls_minimum_protocol_version: TLSv1_3
              tls_maximum_protocol_version: TLSv1_3
            tls_certificates:
            - certificate_chain:
                filename: certs/server-cert.pem
              private_key:
                filename: keys/server-key.pem
            validation_context:
              trust_chain_verification: ACCEPT_UNTRUSTED
  - name: black-hole
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
  - name: ccr-sidecar
    type: STATIC
    connect_timeout: 0.25s
    http2_protocol_options: {}
    load_assignment:
      cluster_name: ccr-sidecar
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 0.0.0.0
                port_value: $CCR_SIDECAR_PORT
